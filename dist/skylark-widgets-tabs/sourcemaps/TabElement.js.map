{"version":3,"sources":["TabElement.js"],"names":["define","strings","Widget","tabs","TabElement","inherit","klassName","_construct","parent","closeable","container","index","title","icon","prototype","call","this","skin","getSkin","_elm","style","overflow","backgroundColor","panelColor","preventDragEvents","uuid","generateUUID","button","active","updateMetadata","updateSettings","updateValues","updateObjectsView","updateSelection","activate","deactivate","undefined","update","self","requestAnimationFrame","attach","object","isAttached","close","removeTab","select","selectTab","isSelected","selected","setIcon","setName","text","destroy"],"mappings":";;;;;;;AAAAA,QACC,wBACA,8BACA,UACC,SACDC,EACAC,EACAC,GAEA,aAiBA,IAAIC,EAAaF,EAAOG,SACvBC,UAAc,aAEdC,WAAe,SAAUC,EAAQC,EAAWC,EAAWC,EAAOC,EAAOC,GACpEX,EAAOY,UAAUP,WAAWQ,KAAKC,KAAMR,EAAQ,OAE/C,IAEIS,EAAOD,KAAKE,UAEhBF,KAAKG,KAAKC,MAAMC,SAAW,UAE3BL,KAAKG,KAAKC,MAAME,gBAAkBL,EAAKM,WACvCP,KAAKQ,oBAQLR,KAAKN,UAAYA,EAQjBM,KAAKS,KAAOxB,EAAQyB,eAQpBV,KAAKL,MAAQA,EAQbK,KAAKW,OAAS,KAGdX,KAAKP,UAAYA,EACjBO,KAAKJ,MAAQA,EACbI,KAAKH,KAAOA,EAQZG,KAAKY,QAAS,GAafC,eAAiB,aAajBC,eAAiB,aAajBC,aAAe,aAafC,kBAAoB,aAapBC,gBAAkB,aAWlBC,SAAW,WAMV,IALmB,IAAhBlB,KAAKY,QACPZ,KAAKmB,kBAIaC,IAAhBpB,KAAKqB,OAAqB,CAC5B,IAAIC,EAAOtB,KAEPqB,EAAS,WAEZC,EAAKD,UAEc,IAAhBC,EAAKV,QAEPW,sBAAsBF,IAIxBE,sBAAsBF,GAGvBrB,KAAKY,QAAS,GAUfO,WAAa,WACZnB,KAAKY,QAAS,GAWfY,OAAS,SAASC,KAWlBC,WAAa,SAASD,GACrB,OAAO,GAQRE,MAAQ,WACP3B,KAAKN,UAAUkC,UAAU5B,OAQ1B6B,OAAS,WACR7B,KAAKN,UAAUoC,UAAU9B,OAS1B+B,WAAa,WACZ,OAAO/B,OAASA,KAAKN,UAAUsC,UAWhCC,QAAU,SAASpC,GAClBG,KAAKH,KAAOA,EACZG,KAAKW,OAAOsB,QAAQpC,IAWrBqC,QAAU,SAASC,GAClBnC,KAAKJ,MAAQuC,EACbnC,KAAKW,OAAOuB,QAAQC,IAGrBC,QAAU,WACTlD,EAAOY,UAAUsC,QAAQrC,KAAKC,MAEX,OAAhBA,KAAKW,QACPX,KAAKW,OAAOyB,aAOf,OAAOjD,EAAKC,WAAaA","file":"../TabElement.js","sourcesContent":["define([\r\n\t\"skylark-langx-strings\",\r\n\t\"skylark-widgets-base/Widget\",\r\n\t\"./tabs\"\r\n],function(\r\n\tstrings,\r\n\tWidget,\r\n\ttabs\r\n){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Tab element is used to create tabbed elements.\r\n\t *\r\n\t * These are used to implement the main components of the interface (editors, menus, etc).\r\n\t *\r\n\t * @class TabElement\r\n\t * @extends {Widget}\r\n\t * @param {Widget} parent Parent element.\r\n\t * @param {Boolean} closeable If false the tab cannot be closed.\r\n\t * @param {TabContainer} container Container for this tab.\r\n\t * @param {Number} index Index of the tab.\r\n\t * @param {String} title Title of the tab.\r\n\t * @param {String} icon Icon of the tab.\r\n\t */\r\n\r\n\tvar TabElement = Widget.inherit({\r\n\t\t\"klassName\" : \"TabElement\",\r\n\r\n\t\t\"_construct\" : function (parent, closeable, container, index, title, icon){\r\n\t\t\tWidget.prototype._construct.call(this, parent, \"div\");\r\n\r\n\t\t\tvar self = this;\r\n\r\n\t\t\tvar skin = this.getSkin();\r\n\r\n\t\t\tthis._elm.style.overflow = \"visible\";\r\n\t\t\t//this._elm.style.backgroundColor = Editor.theme.panelColor;\r\n\t\t\tthis._elm.style.backgroundColor = skin.panelColor;\r\n\t\t\tthis.preventDragEvents();\r\n\r\n\t\t\t/**\r\n\t\t\t * Pointer to the group where this tab is.\r\n\t\t\t *\r\n\t\t\t * @property container\r\n\t\t\t * @type {TabGroup}\r\n\t\t\t */\r\n\t\t\tthis.container = container;\r\n\r\n\t\t\t/**\r\n\t\t\t * UUID of this tab.\r\n\t\t\t *\r\n\t\t\t * @property uuid\r\n\t\t\t * @type {String}\r\n\t\t\t */\r\n\t\t\tthis.uuid = strings.generateUUID();\r\n\r\n\t\t\t/**\r\n\t\t\t * Index of the tab inside of the container\r\n\t\t\t *\r\n\t\t\t * @property index\r\n\t\t\t * @type {Number}\r\n\t\t\t */\r\n\t\t\tthis.index = index;\r\n\r\n\t\t\t/**\r\n\t\t\t * Pointer to the button associated with this tab.\r\n\t\t\t *\r\n\t\t\t * @property container\r\n\t\t\t * @type {TabButton}\r\n\t\t\t */\r\n\t\t\tthis.button = null;\r\n\r\n\t\t\t//Meta\r\n\t\t\tthis.closeable = closeable;\r\n\t\t\tthis.title = title;\r\n\t\t\tthis.icon = icon;\r\n\r\n\t\t\t/**\r\n\t\t\t * Indicates if the tab is currently active (on display).\r\n\t\t\t *\r\n\t\t\t * @property active\r\n\t\t\t * @type {Boolean}\r\n\t\t\t */\r\n\t\t\tthis.active = false;\r\n\t\t},\r\n\r\n\r\n\t\t/**\r\n\t\t * Update tab metadata (name, icon, ...)\r\n\t\t * \r\n\t\t * Called after applying changes to object.\r\n\t\t * \r\n\t\t * Called for every tab.\r\n\t\t *\r\n\t\t * @method updateMetadata\r\n\t\t */\r\n\t\tupdateMetadata : function(){\r\n\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Update tab settings.\r\n\t\t * \r\n\t\t * Called after settings of the editor are changed.\r\n\t\t * \r\n\t\t * Called for every tab.\r\n\t\t *\r\n\t\t * @method updateSettings\r\n\t\t */\r\n\t\tupdateSettings : function(){\r\n\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Update tab values of the gui for the object attached.\r\n\t\t * \r\n\t\t * Called when properties of objects are changed.\r\n\t\t * \r\n\t\t * Called only for active tabs.\r\n\t\t *\r\n\t\t * @method updateValues\r\n\t\t */\r\n\t\tupdateValues : function(){\r\n\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Update tab object view.\r\n\t\t * \r\n\t\t * Called when objects are added, removed, etc.\r\n\t\t * \r\n\t\t * Called only for active tabs.\r\n\t\t *\r\n\t\t * @method updateObjectsView\r\n\t\t */\r\n\t\tupdateObjectsView : function(){\r\n\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Update tab after object selection changed.\r\n\t\t * \r\n\t\t * Called after a new object was selected.\r\n\t\t * \r\n\t\t * Called only for active tabs.\r\n\t\t *\r\n\t\t * @method updateSelection\r\n\t\t */\r\n\t\tupdateSelection : function(){\r\n\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Activate tab.\r\n\t\t * \r\n\t\t * Called when a tab becomes active (visible).\r\n\t\t *\r\n\t\t * @method activate\r\n\t\t */\r\n\t\tactivate : function()\t{\r\n\t\t\tif(this.active === true){\r\n\t\t\t\tthis.deactivate();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t//TODO <IF TAB NEEDS UPDATE IT SHOULD TAKE CARE OF IT>\r\n\t\t\tif(this.update !== undefined){\r\n\t\t\t\tvar self = this;\r\n\r\n\t\t\t\tvar update = function()\r\n\t\t\t\t{\r\n\t\t\t\t\tself.update();\r\n\r\n\t\t\t\t\tif(self.active === true)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\trequestAnimationFrame(update);\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\r\n\t\t\t\trequestAnimationFrame(update);\r\n\t\t\t}\r\n\r\n\t\t\tthis.active = true;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Deactivate tab.\r\n\t\t * \r\n\t\t * Called when a tab is deactivated or closed.\r\n\t\t *\r\n\t\t * @method deactivate\r\n\t\t */\r\n\t\tdeactivate : function(){\r\n\t\t\tthis.active = false;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Generic method to attach object to a tab.\r\n\t\t *\r\n\t\t * Attached object can be edited using the tab.\r\n\t\t *\r\n\t\t * @method attach\r\n\t\t * @param {Object} object\r\n\t\t */\r\n\t\tattach : function(object){\r\n\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Check if an object or resource is attached to the tab.\r\n\t\t * \r\n\t\t * Called to check if a tab needs to be closed after changes to objects.\r\n\t\t *\r\n\t\t * @method isAttached\r\n\t\t */\r\n\t\tisAttached : function(object)\t{\r\n\t\t\treturn false;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Close the tab element and remove is from the container.\r\n\t\t * \r\n\t\t * @method close\r\n\t\t */\r\n\t\tclose : function()\t{\r\n\t\t\tthis.container.removeTab(this);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Select this tab.\r\n\t\t * \r\n\t\t * @method select\r\n\t\t */\r\n\t\tselect : function(){\r\n\t\t\tthis.container.selectTab(this);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Check if tab is selected\r\n\t\t *\r\n\t\t * @method isSelected\r\n\t\t * @return {Boolean} True if the tab is selected in the container.\r\n\t\t */\r\n\t\tisSelected : function(){\r\n\t\t\treturn this === this.container.selected;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set icon of the button attached to this tab.\r\n\t\t *\r\n\t\t * The button should have a .setIcon(url) method.\r\n\t\t *\r\n\t\t * @method setIcon\r\n\t\t * @param {String} icon URL of the icon.\r\n\t\t */\r\n\t\tsetIcon : function(icon){\r\n\t\t\tthis.icon = icon;\r\n\t\t\tthis.button.setIcon(icon);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set text in the button.\r\n\t\t *\r\n\t\t * The button should have a .setName(text) method.\r\n\t\t *\r\n\t\t * @method setName\r\n\t\t * @param {String} text\r\n\t\t */\r\n\t\tsetName : function(text){\r\n\t\t\tthis.title = text;\r\n\t\t\tthis.button.setName(text);\r\n\t\t},\r\n\r\n\t\tdestroy : function(){\r\n\t\t\tWidget.prototype.destroy.call(this);\r\n\t\t\t\r\n\t\t\tif(this.button !== null){\r\n\t\t\t\tthis.button.destroy();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t});\r\n\r\n\r\n\treturn tabs.TabElement = TabElement;\r\n});"]}