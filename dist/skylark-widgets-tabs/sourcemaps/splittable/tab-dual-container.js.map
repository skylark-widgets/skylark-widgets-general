{"version":3,"sources":["splittable/tab-dual-container.js"],"names":["define","DualContainer","tabs","TabGroup","TabDualContainer","inherit","_construct","parent","prototype","call","this","_elm","style","overflow","updateMetadata","_elmA","_elmB","updateObjectsView","updateSelection","updateSettings","getActiveTab","tab","active","push","concat","closeActual","focused","selectTab","selectNextTab","selectPreviousTab","addTab","TabConstructor","closeable","getTab","type","object","clear","forceAll","splittable"],"mappings":";;;;;;;AAAAA,QACC,6CACA,UACA,gBACC,SAASC,EAAcC,EAAKC,GAC7B,aAQC,IAAIC,EAAmBH,EAAcI,SACrCC,WAAe,SAASC,GACvBN,EAAcO,UAAUF,WAAWG,KAAKC,KAAMH,GAE9CG,KAAKC,KAAKC,MAAMC,SAAW,WAS5BC,eAAiB,WAEhBJ,KAAKK,MAAMD,iBACXJ,KAAKM,MAAMF,kBAQZG,kBAAoB,WAEnBP,KAAKK,MAAME,oBACXP,KAAKM,MAAMC,qBAUZC,gBAAkB,WAEjBR,KAAKK,MAAMG,kBACXR,KAAKM,MAAME,mBAUZC,eAAiB,WAEhBT,KAAKK,MAAMI,iBACXT,KAAKM,MAAMG,kBASZC,aAAe,WAEd,IAiBKC,EAjBDC,KAEDZ,KAAKK,iBAAiBZ,EAGb,QADPkB,EAAMX,KAAKK,MAAMK,iBAGpBE,EAAOC,KAAKF,GAKbC,EAASA,EAAOE,OAAOd,KAAKK,MAAMK,gBAGhCV,KAAKM,iBAAiBb,GAGb,QADPkB,EAAMX,KAAKM,MAAMI,iBAGpBE,EAAOC,KAAKF,GAEbX,KAAKK,MAAMK,gBAIXE,EAASA,EAAOE,OAAOd,KAAKM,MAAMI,gBAGnC,OAAOE,GAQRG,YAAc,WAERf,KAAKK,iBAAiBZ,IAAaO,KAAKK,MAAMW,SAElDhB,KAAKK,MAAMU,cAGPf,KAAKM,iBAAiBb,IAAaO,KAAKM,MAAMU,SAElDhB,KAAKM,MAAMS,eAUbE,UAAY,SAASN,GAEpBX,KAAKK,MAAMY,UAAUN,GACrBX,KAAKM,MAAMW,UAAUN,IAQtBO,cAAgB,WAEVlB,KAAKK,iBAAiBZ,IAAaO,KAAKK,MAAMW,SAElDhB,KAAKK,MAAMa,gBAGPlB,KAAKM,iBAAiBb,IAAaO,KAAKM,MAAMU,SAElDhB,KAAKM,MAAMY,iBASbC,kBAAoB,WAEdnB,KAAKK,iBAAiBZ,IAAaO,KAAKK,MAAMW,SAElDhB,KAAKK,MAAMc,oBAGPnB,KAAKM,iBAAiBb,IAAaO,KAAKM,MAAMU,SAElDhB,KAAKM,MAAMa,qBAabC,OAAS,SAASC,EAAgBC,GAEjC,IAAIX,EAAMX,KAAKK,MAAMe,OAAOC,EAAgBC,GAM5C,OALW,OAARX,IAEFA,EAAMX,KAAKM,MAAMc,OAAOC,EAAgBC,IAGlCX,GAURY,OAAS,SAASC,EAAMC,GAEvB,IAAId,EAAMX,KAAKK,MAAMkB,OAAOC,EAAMC,GAOlC,OALW,OAARd,IAEFA,EAAMX,KAAKM,MAAMiB,OAAOC,EAAMC,IAGxBd,GAQRe,MAAQ,SAASC,GAEhB3B,KAAKK,MAAMqB,MAAMC,GACjB3B,KAAKM,MAAMoB,MAAMC,MAMnB,OAAOnC,EAAKoC,WAAWlC,iBAAmBA","file":"../../splittable/tab-dual-container.js","sourcesContent":["define([\r\n\t\"skylark-widgets-base/panels/dual-container\",\r\n\t\"../tabs\",\r\n\t\"../tab-group\"\r\n],function(DualContainer,tabs,TabGroup){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Tab dual container is a dual container with tabgroups.\r\n\t *\r\n\t * @class TabDualContainer\r\n\t * @extends {Element, TabDual}\r\n\t */\r\n\t var TabDualContainer = DualContainer.inherit({\r\n\t\t\"_construct\" : function(parent)\t{\r\n\t\t\tDualContainer.prototype._construct.call(this, parent);\r\n\r\n\t\t\tthis._elm.style.overflow = \"visible\";\r\n\t\t},\r\n\r\n\r\n\t\t/**\r\n\t\t * Update all tabs object data.\r\n\t\t *\r\n\t\t * @method updateMetadata\r\n\t\t */\r\n\t\tupdateMetadata : function()\r\n\t\t{\r\n\t\t\tthis._elmA.updateMetadata();\r\n\t\t\tthis._elmB.updateMetadata();\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Update all tab object views.\r\n\t\t *\r\n\t\t * @method updateObjectsView\r\n\t\t */\r\n\t\tupdateObjectsView : function()\r\n\t\t{\r\n\t\t\tthis._elmA.updateObjectsView();\r\n\t\t\tthis._elmB.updateObjectsView();\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Update all tab object selection status.\r\n\t\t * \r\n\t\t * Should be called after object selection changes.\r\n\t\t *\r\n\t\t * @method updateSelection\r\n\t\t */\r\n\t\tupdateSelection : function()\r\n\t\t{\r\n\t\t\tthis._elmA.updateSelection();\r\n\t\t\tthis._elmB.updateSelection();\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Update all tab settings.\r\n\t\t *\r\n\t\t * Should be called after editor settings are changed.\r\n\t\t *\r\n\t\t * @method updateSettings\r\n\t\t */\r\n\t\tupdateSettings : function()\r\n\t\t{\r\n\t\t\tthis._elmA.updateSettings();\r\n\t\t\tthis._elmB.updateSettings();\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Get an array with all the tabs currently active.\r\n\t\t *\r\n\t\t * @method getActiveTab\r\n\t\t * @return {Array} Active tabs.\r\n\t\t */\r\n\t\tgetActiveTab : function()\r\n\t\t{\r\n\t\t\tvar active = [];\r\n\r\n\t\t\tif(this._elmA instanceof TabGroup)\r\n\t\t\t{\r\n\t\t\t\tvar tab = this._elmA.getActiveTab();\r\n\t\t\t\tif(tab !== null)\r\n\t\t\t\t{\r\n\t\t\t\t\tactive.push(tab);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tactive = active.concat(this._elmA.getActiveTab());\r\n\t\t\t}\r\n\r\n\t\t\tif(this._elmB instanceof TabGroup)\r\n\t\t\t{\r\n\t\t\t\tvar tab = this._elmB.getActiveTab();\r\n\t\t\t\tif(tab !== null)\r\n\t\t\t\t{\r\n\t\t\t\t\tactive.push(tab);\r\n\t\t\t\t}\r\n\t\t\t\tthis._elmA.getActiveTab();\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tactive = active.concat(this._elmB.getActiveTab());\r\n\t\t\t}\r\n\r\n\t\t\treturn active;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Close the tab that is currently being shown if it is closeable.\r\n\t\t *\r\n\t\t * @method closeActual\r\n\t\t */\r\n\t\tcloseActual : function()\r\n\t\t{\r\n\t\t\tif(!(this._elmA instanceof TabGroup) || this._elmA.focused)\r\n\t\t\t{\r\n\t\t\t\tthis._elmA.closeActual();\r\n\t\t\t}\r\n\r\n\t\t\tif(!(this._elmB instanceof TabGroup) || this._elmB.focused)\r\n\t\t\t{\r\n\t\t\t\tthis._elmB.closeActual();\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Select a specific tab from the container tab tree.\r\n\t\t *\r\n\t\t * @method selectTab\r\n\t\t * @param {TabElement} tab Tab to select.\r\n\t\t */\r\n\t\tselectTab : function(tab)\r\n\t\t{\r\n\t\t\tthis._elmA.selectTab(tab);\r\n\t\t\tthis._elmB.selectTab(tab);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Select next tab from the currently focused tab group.\r\n\t\t *\r\n\t\t * @method selectNextTab\r\n\t\t */\r\n\t\tselectNextTab : function()\r\n\t\t{\r\n\t\t\tif(!(this._elmA instanceof TabGroup) || this._elmA.focused)\r\n\t\t\t{\r\n\t\t\t\tthis._elmA.selectNextTab();\r\n\t\t\t}\r\n\r\n\t\t\tif(!(this._elmB instanceof TabGroup) || this._elmB.focused)\r\n\t\t\t{\r\n\t\t\t\tthis._elmB.selectNextTab();\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Select previous tab from the currently focused tab group.\r\n\t\t *\r\n\t\t * @method selectPreviousTab\r\n\t\t */\r\n\t\tselectPreviousTab : function()\r\n\t\t{\r\n\t\t\tif(!(this._elmA instanceof TabGroup) || this._elmA.focused)\r\n\t\t\t{\r\n\t\t\t\tthis._elmA.selectPreviousTab();\r\n\t\t\t}\r\n\r\n\t\t\tif(!(this._elmB instanceof TabGroup) || this._elmB.focused)\r\n\t\t\t{\r\n\t\t\t\tthis._elmB.selectPreviousTab();\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Add new option to tab group.\r\n\t\t *\r\n\t\t * Prefer the tab group stored on the elementA.\r\n\t\t *\r\n\t\t * @method addTab\r\n\t\t * @param {Constructor} TabConstructor Constructor if the TabElement to be added to the container.\r\n\t\t * @param {Boolean} closeable Indicates if the tab can be closed.\r\n\t\t */\r\n\t\taddTab : function(TabConstructor, closeable)\r\n\t\t{\r\n\t\t\tvar tab = this._elmA.addTab(TabConstructor, closeable);\r\n\t\t\tif(tab === null)\r\n\t\t\t{\r\n\t\t\t\ttab = this._elmB.addTab(TabConstructor, closeable);\r\n\t\t\t}\r\n\r\n\t\t\treturn tab;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Get tab from tab type and attached object is there is any.\r\n\t\t *\r\n\t\t * @param {Constructor} type Type of the tab to look for.\r\n\t\t * @param {Object} object Object attached to the tab.\r\n\t\t * @return TabElement The tab from the type specified that has the object attached to it.\r\n\t\t */\r\n\t\tgetTab : function(type, object)\r\n\t\t{\r\n\t\t\tvar tab = this._elmA.getTab(type, object);\r\n\t\t\t\r\n\t\t\tif(tab === null)\r\n\t\t\t{\r\n\t\t\t\ttab = this._elmB.getTab(type, object);\r\n\t\t\t}\r\n\r\n\t\t\treturn tab;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Remove all tabs from the container.\r\n\t\t * \r\n\t\t * @method clear\r\n\t\t */\r\n\t\tclear : function(forceAll)\r\n\t\t{\r\n\t\t\tthis._elmA.clear(forceAll);\r\n\t\t\tthis._elmB.clear(forceAll);\r\n\t\t}\r\n\r\n\t });\r\n\r\n\r\n\treturn tabs.splittable.TabDualContainer = TabDualContainer;\r\n});"]}