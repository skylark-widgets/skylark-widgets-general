{"version":3,"sources":["splittable/TabDualContainer.js"],"names":["define","DualContainer","TabGroup","TabDualContainer","inherit","_construct","parent","prototype","call","this","_elm","style","overflow","updateMetadata","_elmA","_elmB","updateObjectsView","updateSelection","updateSettings","getActiveTab","tab","active","push","concat","closeActual","focused","selectTab","selectNextTab","selectPreviousTab","addTab","TabConstructor","closeable","getTab","type","object","clear","forceAll","tabs","splittable"],"mappings":";;;;;;;AAAAA,QACC,4CACA,eACC,SAASC,EAAcC,GACxB,aAQC,IAAIC,EAAmBF,EAAcG,SACrCC,WAAe,SAASC,GACvBL,EAAcM,UAAUF,WAAWG,KAAKC,KAAMH,GAE9CG,KAAKC,KAAKC,MAAMC,SAAW,WAS5BC,eAAiB,WAEhBJ,KAAKK,MAAMD,iBACXJ,KAAKM,MAAMF,kBAQZG,kBAAoB,WAEnBP,KAAKK,MAAME,oBACXP,KAAKM,MAAMC,qBAUZC,gBAAkB,WAEjBR,KAAKK,MAAMG,kBACXR,KAAKM,MAAME,mBAUZC,eAAiB,WAEhBT,KAAKK,MAAMI,iBACXT,KAAKM,MAAMG,kBASZC,aAAe,WAEd,IAiBKC,EAjBDC,KAEDZ,KAAKK,iBAAiBZ,EAGb,QADPkB,EAAMX,KAAKK,MAAMK,iBAGpBE,EAAOC,KAAKF,GAKbC,EAASA,EAAOE,OAAOd,KAAKK,MAAMK,gBAGhCV,KAAKM,iBAAiBb,GAGb,QADPkB,EAAMX,KAAKM,MAAMI,iBAGpBE,EAAOC,KAAKF,GAEbX,KAAKK,MAAMK,gBAIXE,EAASA,EAAOE,OAAOd,KAAKM,MAAMI,gBAGnC,OAAOE,GAQRG,YAAc,WAERf,KAAKK,iBAAiBZ,IAAaO,KAAKK,MAAMW,SAElDhB,KAAKK,MAAMU,cAGPf,KAAKM,iBAAiBb,IAAaO,KAAKM,MAAMU,SAElDhB,KAAKM,MAAMS,eAUbE,UAAY,SAASN,GAEpBX,KAAKK,MAAMY,UAAUN,GACrBX,KAAKM,MAAMW,UAAUN,IAQtBO,cAAgB,WAEVlB,KAAKK,iBAAiBZ,IAAaO,KAAKK,MAAMW,SAElDhB,KAAKK,MAAMa,gBAGPlB,KAAKM,iBAAiBb,IAAaO,KAAKM,MAAMU,SAElDhB,KAAKM,MAAMY,iBASbC,kBAAoB,WAEdnB,KAAKK,iBAAiBZ,IAAaO,KAAKK,MAAMW,SAElDhB,KAAKK,MAAMc,oBAGPnB,KAAKM,iBAAiBb,IAAaO,KAAKM,MAAMU,SAElDhB,KAAKM,MAAMa,qBAabC,OAAS,SAASC,EAAgBC,GAEjC,IAAIX,EAAMX,KAAKK,MAAMe,OAAOC,EAAgBC,GAM5C,OALW,OAARX,IAEFA,EAAMX,KAAKM,MAAMc,OAAOC,EAAgBC,IAGlCX,GAURY,OAAS,SAASC,EAAMC,GAEvB,IAAId,EAAMX,KAAKK,MAAMkB,OAAOC,EAAMC,GAOlC,OALW,OAARd,IAEFA,EAAMX,KAAKM,MAAMiB,OAAOC,EAAMC,IAGxBd,GAQRe,MAAQ,SAASC,GAEhB3B,KAAKK,MAAMqB,MAAMC,GACjB3B,KAAKM,MAAMoB,MAAMC,MAMnB,OAAOC,KAAKC,WAAWnC,iBAAmBA","file":"../../splittable/TabDualContainer.js","sourcesContent":["define([\n\t\"skylark-widgets-base/panels/DualContainer\",\n\t\"../TabGroup\"\n],function(DualContainer,TabGroup){\n\t\"use strict\";\n\n\t/**\n\t * Tab dual container is a dual container with tabgroups.\n\t *\n\t * @class TabDualContainer\n\t * @extends {Element, TabDual}\n\t */\n\t var TabDualContainer = DualContainer.inherit({\n\t\t\"_construct\" : function(parent)\t{\n\t\t\tDualContainer.prototype._construct.call(this, parent);\n\n\t\t\tthis._elm.style.overflow = \"visible\";\n\t\t},\n\n\n\t\t/**\n\t\t * Update all tabs object data.\n\t\t *\n\t\t * @method updateMetadata\n\t\t */\n\t\tupdateMetadata : function()\n\t\t{\n\t\t\tthis._elmA.updateMetadata();\n\t\t\tthis._elmB.updateMetadata();\n\t\t},\n\n\t\t/**\n\t\t * Update all tab object views.\n\t\t *\n\t\t * @method updateObjectsView\n\t\t */\n\t\tupdateObjectsView : function()\n\t\t{\n\t\t\tthis._elmA.updateObjectsView();\n\t\t\tthis._elmB.updateObjectsView();\n\t\t},\n\n\t\t/**\n\t\t * Update all tab object selection status.\n\t\t * \n\t\t * Should be called after object selection changes.\n\t\t *\n\t\t * @method updateSelection\n\t\t */\n\t\tupdateSelection : function()\n\t\t{\n\t\t\tthis._elmA.updateSelection();\n\t\t\tthis._elmB.updateSelection();\n\t\t},\n\n\t\t/**\n\t\t * Update all tab settings.\n\t\t *\n\t\t * Should be called after editor settings are changed.\n\t\t *\n\t\t * @method updateSettings\n\t\t */\n\t\tupdateSettings : function()\n\t\t{\n\t\t\tthis._elmA.updateSettings();\n\t\t\tthis._elmB.updateSettings();\n\t\t},\n\n\t\t/**\n\t\t * Get an array with all the tabs currently active.\n\t\t *\n\t\t * @method getActiveTab\n\t\t * @return {Array} Active tabs.\n\t\t */\n\t\tgetActiveTab : function()\n\t\t{\n\t\t\tvar active = [];\n\n\t\t\tif(this._elmA instanceof TabGroup)\n\t\t\t{\n\t\t\t\tvar tab = this._elmA.getActiveTab();\n\t\t\t\tif(tab !== null)\n\t\t\t\t{\n\t\t\t\t\tactive.push(tab);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tactive = active.concat(this._elmA.getActiveTab());\n\t\t\t}\n\n\t\t\tif(this._elmB instanceof TabGroup)\n\t\t\t{\n\t\t\t\tvar tab = this._elmB.getActiveTab();\n\t\t\t\tif(tab !== null)\n\t\t\t\t{\n\t\t\t\t\tactive.push(tab);\n\t\t\t\t}\n\t\t\t\tthis._elmA.getActiveTab();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tactive = active.concat(this._elmB.getActiveTab());\n\t\t\t}\n\n\t\t\treturn active;\n\t\t},\n\n\t\t/**\n\t\t * Close the tab that is currently being shown if it is closeable.\n\t\t *\n\t\t * @method closeActual\n\t\t */\n\t\tcloseActual : function()\n\t\t{\n\t\t\tif(!(this._elmA instanceof TabGroup) || this._elmA.focused)\n\t\t\t{\n\t\t\t\tthis._elmA.closeActual();\n\t\t\t}\n\n\t\t\tif(!(this._elmB instanceof TabGroup) || this._elmB.focused)\n\t\t\t{\n\t\t\t\tthis._elmB.closeActual();\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Select a specific tab from the container tab tree.\n\t\t *\n\t\t * @method selectTab\n\t\t * @param {TabElement} tab Tab to select.\n\t\t */\n\t\tselectTab : function(tab)\n\t\t{\n\t\t\tthis._elmA.selectTab(tab);\n\t\t\tthis._elmB.selectTab(tab);\n\t\t},\n\n\t\t/**\n\t\t * Select next tab from the currently focused tab group.\n\t\t *\n\t\t * @method selectNextTab\n\t\t */\n\t\tselectNextTab : function()\n\t\t{\n\t\t\tif(!(this._elmA instanceof TabGroup) || this._elmA.focused)\n\t\t\t{\n\t\t\t\tthis._elmA.selectNextTab();\n\t\t\t}\n\n\t\t\tif(!(this._elmB instanceof TabGroup) || this._elmB.focused)\n\t\t\t{\n\t\t\t\tthis._elmB.selectNextTab();\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Select previous tab from the currently focused tab group.\n\t\t *\n\t\t * @method selectPreviousTab\n\t\t */\n\t\tselectPreviousTab : function()\n\t\t{\n\t\t\tif(!(this._elmA instanceof TabGroup) || this._elmA.focused)\n\t\t\t{\n\t\t\t\tthis._elmA.selectPreviousTab();\n\t\t\t}\n\n\t\t\tif(!(this._elmB instanceof TabGroup) || this._elmB.focused)\n\t\t\t{\n\t\t\t\tthis._elmB.selectPreviousTab();\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Add new option to tab group.\n\t\t *\n\t\t * Prefer the tab group stored on the elementA.\n\t\t *\n\t\t * @method addTab\n\t\t * @param {Constructor} TabConstructor Constructor if the TabElement to be added to the container.\n\t\t * @param {Boolean} closeable Indicates if the tab can be closed.\n\t\t */\n\t\taddTab : function(TabConstructor, closeable)\n\t\t{\n\t\t\tvar tab = this._elmA.addTab(TabConstructor, closeable);\n\t\t\tif(tab === null)\n\t\t\t{\n\t\t\t\ttab = this._elmB.addTab(TabConstructor, closeable);\n\t\t\t}\n\n\t\t\treturn tab;\n\t\t},\n\n\t\t/**\n\t\t * Get tab from tab type and attached object is there is any.\n\t\t *\n\t\t * @param {Constructor} type Type of the tab to look for.\n\t\t * @param {Object} object Object attached to the tab.\n\t\t * @return TabElement The tab from the type specified that has the object attached to it.\n\t\t */\n\t\tgetTab : function(type, object)\n\t\t{\n\t\t\tvar tab = this._elmA.getTab(type, object);\n\t\t\t\n\t\t\tif(tab === null)\n\t\t\t{\n\t\t\t\ttab = this._elmB.getTab(type, object);\n\t\t\t}\n\n\t\t\treturn tab;\n\t\t},\n\n\t\t/**\n\t\t * Remove all tabs from the container.\n\t\t * \n\t\t * @method clear\n\t\t */\n\t\tclear : function(forceAll)\n\t\t{\n\t\t\tthis._elmA.clear(forceAll);\n\t\t\tthis._elmB.clear(forceAll);\n\t\t}\n\n\t });\n\n\n\treturn tabs.splittable.TabDualContainer = TabDualContainer;\n});"]}