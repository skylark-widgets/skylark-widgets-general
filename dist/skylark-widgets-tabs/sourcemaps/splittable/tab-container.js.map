{"version":3,"sources":["splittable/tab-container.js"],"names":["define","Panel","tabs","TabGroup","TabContainer","inherit","klassName","_construct","parent","prototype","call","this","group","split","direction","attach","element","setParent","updateSize","position","set","size","copy","updateInterface","updateMetadata","updateObjectsView","updateSelection","updateSettings","getActiveTab","active","tab","push","concat","closeActual","selectTab","selectNextTab","selectPreviousTab","addTab","TabConstructor","closeable","getTab","type","object","clear","forceAll","splittable"],"mappings":";;;;;;;AAAAA,QACC,oCACA,UACA,gBACC,SACDC,EACAC,EACAC,GAEA,aAUA,IAAIC,EAAeH,EAAMI,SACxBC,UAAc,eAEdC,WAAgB,SAASC,GACxBP,EAAMQ,UAAUF,WAAWG,KAAKC,KAAMH,GAEtCG,KAAKC,MAAQ,MAWdC,MAAQ,SAASC,GAEhB,OAAOH,KAAKC,MAAMC,MAAMC,IAGzBC,OAAS,SAASC,GAEjBL,KAAKC,MAAQI,EACbL,KAAKC,MAAMK,UAAUN,OAGtBO,WAAa,WAEZjB,EAAMQ,UAAUS,WAAWR,KAAKC,MAEd,OAAfA,KAAKC,QAEPD,KAAKC,MAAMO,SAASC,IAAI,EAAG,GAC3BT,KAAKC,MAAMS,KAAKC,KAAKX,KAAKU,MAC1BV,KAAKC,MAAMW,oBASbC,eAAiB,WAEhBb,KAAKC,MAAMY,kBAQZC,kBAAoB,WAEnBd,KAAKC,MAAMa,qBAUZC,gBAAkB,WAEjBf,KAAKC,MAAMc,mBAUZC,eAAiB,WAEhBhB,KAAKC,MAAMe,kBASZC,aAAe,WAEd,IAAIC,KAEJ,GAAGlB,KAAKC,iBAAiBT,EACzB,CACC,IAAI2B,EAAMnB,KAAKC,MAAMgB,eACV,OAARE,GAEFD,EAAOE,KAAKD,QAKbD,EAASA,EAAOG,OAAOrB,KAAKC,MAAMgB,gBAGnC,OAAOjB,KAAKC,MAAMgB,gBAQnBK,YAAc,WAEbtB,KAAKC,MAAMqB,eASZC,UAAY,SAASJ,GAEpBnB,KAAKC,MAAMsB,UAAUJ,IAQtBK,cAAgB,WAEfxB,KAAKC,MAAMuB,iBAQZC,kBAAoB,WAEnBzB,KAAKC,MAAMwB,qBAUZC,OAAS,SAASC,EAAgBC,GAEjC,OAAO5B,KAAKC,MAAMyB,OAAOC,EAAgBC,IAU1CC,OAAS,SAASC,EAAMC,GAEvB,OAAO/B,KAAKC,MAAM4B,OAAOC,EAAMC,IAQhCC,MAAQ,SAASC,GAEhBjC,KAAKC,MAAM+B,WAKb,OAAOzC,EAAK2C,WAAWzC,aAAeA","file":"../../splittable/tab-container.js","sourcesContent":["define([\r\n\t\"skylark-widgets-base/panels/panel\",\r\n\t\"../tabs\",\r\n\t\"../tab-group\"\r\n],function(\r\n\tPanel,\r\n\ttabs,\r\n\tTabGroup\r\n){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Tab container is the root for a tree of tab groups.\r\n\t *\r\n\t * The container keeps track of all groups that may be splited into multiple groups.\r\n\t *\r\n\t * @class TabContainer\r\n\t * @extends {Panel}\r\n\t */\r\n\tvar TabContainer = Panel.inherit({\r\n\t\t\"klassName\" : \"TabContainer\",\r\n\r\n\t\t\"_construct\" :  function(parent){\r\n\t\t\tPanel.prototype._construct.call(this, parent);\r\n\t\t\t\r\n\t\t\tthis.group = null;\r\n\t\t},\r\n\r\n\r\n\t\t/**\r\n\t\t * Split this tab group into two new tab groups.\r\n\t\t *\r\n\t\t * @method split\r\n\t\t * @param {Number} direction Direction where to insert the new tab.\r\n\t\t * @return {TabGroupSplit} The new created tab group.\r\n\t\t */\r\n\t\tsplit : function(direction)\r\n\t\t{\r\n\t\t\treturn this.group.split(direction);\r\n\t\t},\r\n\r\n\t\tattach : function(element)\r\n\t\t{\r\n\t\t\tthis.group = element;\r\n\t\t\tthis.group.setParent(this);\r\n\t\t},\r\n\r\n\t\tupdateSize : function()\r\n\t\t{\r\n\t\t\tPanel.prototype.updateSize.call(this);\r\n\r\n\t\t\tif(this.group !== null)\r\n\t\t\t{\r\n\t\t\t\tthis.group.position.set(0, 0);\r\n\t\t\t\tthis.group.size.copy(this.size);\r\n\t\t\t\tthis.group.updateInterface();\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Update all tabs object data.\r\n\t\t *\r\n\t\t * @method updateMetadata\r\n\t\t */\r\n\t\tupdateMetadata : function()\r\n\t\t{\r\n\t\t\tthis.group.updateMetadata();\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Update all tab object views.\r\n\t\t *\r\n\t\t * @method updateObjectsView\r\n\t\t */\r\n\t\tupdateObjectsView : function()\r\n\t\t{\r\n\t\t\tthis.group.updateObjectsView();\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Update all tab object selection status.\r\n\t\t * \r\n\t\t * Should be called after object selection changes.\r\n\t\t *\r\n\t\t * @method updateSelection\r\n\t\t */\r\n\t\tupdateSelection : function()\r\n\t\t{\r\n\t\t\tthis.group.updateSelection();\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Update all tab settings.\r\n\t\t *\r\n\t\t * Should be called after editor settings are changed.\r\n\t\t *\r\n\t\t * @method updateSettings\r\n\t\t */\r\n\t\tupdateSettings : function()\r\n\t\t{\r\n\t\t\tthis.group.updateSettings();\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Get an array with all the tabs currently active.\r\n\t\t *\r\n\t\t * @method getActiveTab\r\n\t\t * @return {Array} Active tabs.\r\n\t\t */\r\n\t\tgetActiveTab : function()\r\n\t\t{\r\n\t\t\tvar active = [];\r\n\r\n\t\t\tif(this.group instanceof TabGroup)\r\n\t\t\t{\r\n\t\t\t\tvar tab = this.group.getActiveTab();\r\n\t\t\t\tif(tab !== null)\r\n\t\t\t\t{\r\n\t\t\t\t\tactive.push(tab);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tactive = active.concat(this.group.getActiveTab());\r\n\t\t\t}\r\n\r\n\t\t\treturn this.group.getActiveTab();\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Close the tab that is currently being shown if it is closeable.\r\n\t\t *\r\n\t\t * @method closeActual\r\n\t\t */\r\n\t\tcloseActual : function()\r\n\t\t{\r\n\t\t\tthis.group.closeActual();\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Select a specific tab from the container tab tree.\r\n\t\t *\r\n\t\t * @method selectTab\r\n\t\t * @param {TabElement} tab Tab to select.\r\n\t\t */\r\n\t\tselectTab : function(tab)\r\n\t\t{\r\n\t\t\tthis.group.selectTab(tab);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Select next tab from the currently focused tab group.\r\n\t\t *\r\n\t\t * @method selectNextTab\r\n\t\t */\r\n\t\tselectNextTab : function()\r\n\t\t{\r\n\t\t\tthis.group.selectNextTab();\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Select previous tab from the currently focused tab group.\r\n\t\t *\r\n\t\t * @method selectPreviousTab\r\n\t\t */\r\n\t\tselectPreviousTab : function()\r\n\t\t{\r\n\t\t\tthis.group.selectPreviousTab();\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Add new tab to the tab container.\r\n\t\t * \r\n\t\t * @method addTab\r\n\t\t * @param {Constructor} TabConstructor Constructor if the TabElement to be added to the container.\r\n\t\t * @param {Boolean} closeable Indicates if the tab can be closed.\r\n\t\t */\r\n\t\taddTab : function(TabConstructor, closeable)\r\n\t\t{\r\n\t\t\treturn this.group.addTab(TabConstructor, closeable);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Get tab from tab type and attached object is there is any.\r\n\t\t *\r\n\t\t * @param {Constructor} type Type of the tab to look for.\r\n\t\t * @param {Object} object Object attached to the tab.\r\n\t\t * @return TabElement The tab from the type specified that has the object attached to it.\r\n\t\t */\r\n\t\tgetTab : function(type, object)\r\n\t\t{\r\n\t\t\treturn this.group.getTab(type, object);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Remove all tabs from the container.\r\n\t\t * \r\n\t\t * @method clear\r\n\t\t */\r\n\t\tclear : function(forceAll)\r\n\t\t{\r\n\t\t\tthis.group.clear();\r\n\t\t}\r\n\t});\r\n\r\n\r\n\treturn tabs.splittable.TabContainer = TabContainer;\r\n});"]}